package com.silversea.aem.ws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.10
 * 2017-03-09T17:59:42.030+01:00
 * Generated source version: 3.1.10
 * 
 */
@WebServiceClient(name = "LeadFromWeb03", 
                  wsdlLocation = "file:/Users/aurelienolivier/Desktop/LeadFromWeb03.wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class LeadFromWeb03 extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "LeadFromWeb03");
    public final static QName LeadFromWeb03Soap = new QName("http://tempuri.org/", "LeadFromWeb03Soap");
    public final static QName LeadFromWeb03Soap12 = new QName("http://tempuri.org/", "LeadFromWeb03Soap12");
    public final static QName LeadFromWeb03HttpPost = new QName("http://tempuri.org/", "LeadFromWeb03HttpPost");
    public final static QName LeadFromWeb03HttpGet = new QName("http://tempuri.org/", "LeadFromWeb03HttpGet");
    static {
        URL url = null;
        try {
            url = new URL("file:/Users/aurelienolivier/Desktop/LeadFromWeb03.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LeadFromWeb03.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/Users/aurelienolivier/Desktop/LeadFromWeb03.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LeadFromWeb03(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LeadFromWeb03(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LeadFromWeb03() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public LeadFromWeb03(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LeadFromWeb03(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LeadFromWeb03(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns LeadFromWeb03Soap
     */
    @WebEndpoint(name = "LeadFromWeb03Soap")
    public LeadFromWeb03Soap getLeadFromWeb03Soap() {
        return super.getPort(LeadFromWeb03Soap, LeadFromWeb03Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LeadFromWeb03Soap
     */
    @WebEndpoint(name = "LeadFromWeb03Soap")
    public LeadFromWeb03Soap getLeadFromWeb03Soap(WebServiceFeature... features) {
        return super.getPort(LeadFromWeb03Soap, LeadFromWeb03Soap.class, features);
    }


    /**
     *
     * @return
     *     returns LeadFromWeb03Soap
     */
    @WebEndpoint(name = "LeadFromWeb03Soap12")
    public LeadFromWeb03Soap getLeadFromWeb03Soap12() {
        return super.getPort(LeadFromWeb03Soap12, LeadFromWeb03Soap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LeadFromWeb03Soap
     */
    @WebEndpoint(name = "LeadFromWeb03Soap12")
    public LeadFromWeb03Soap getLeadFromWeb03Soap12(WebServiceFeature... features) {
        return super.getPort(LeadFromWeb03Soap12, LeadFromWeb03Soap.class, features);
    }


    /**
     *
     * @return
     *     returns LeadFromWeb03HttpPost
     */
    @WebEndpoint(name = "LeadFromWeb03HttpPost")
    public LeadFromWeb03HttpPost getLeadFromWeb03HttpPost() {
        return super.getPort(LeadFromWeb03HttpPost, LeadFromWeb03HttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LeadFromWeb03HttpPost
     */
    @WebEndpoint(name = "LeadFromWeb03HttpPost")
    public LeadFromWeb03HttpPost getLeadFromWeb03HttpPost(WebServiceFeature... features) {
        return super.getPort(LeadFromWeb03HttpPost, LeadFromWeb03HttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns LeadFromWeb03HttpGet
     */
    @WebEndpoint(name = "LeadFromWeb03HttpGet")
    public LeadFromWeb03HttpGet getLeadFromWeb03HttpGet() {
        return super.getPort(LeadFromWeb03HttpGet, LeadFromWeb03HttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LeadFromWeb03HttpGet
     */
    @WebEndpoint(name = "LeadFromWeb03HttpGet")
    public LeadFromWeb03HttpGet getLeadFromWeb03HttpGet(WebServiceFeature... features) {
        return super.getPort(LeadFromWeb03HttpGet, LeadFromWeb03HttpGet.class, features);
    }

}
